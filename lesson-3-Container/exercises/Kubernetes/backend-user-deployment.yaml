apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    service: backend-user
  name: backend-user
spec:
  replicas: 2
  template:
    metadata:
      labels:
        service: backend-user
    spec:
      containers:
      - image: anmolaggarwal21/udacity-restapi-user2
        name: backend-user
        imagePullPolicy: Always          
        resources:
          requests:
            memory: "32Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "300m"    
        env: 
        - name: URL
          valueFrom:
            configMapKeyRef:
             name: env-config
             key: URL 
        - name: JWT_SECRET
          valueFrom:
            configMapKeyRef:
              name: env-config 
              key: JWT_SECRET
        - name: POSTGRESS_AWS_MEDIA_BUCKET
          valueFrom:
            configMapKeyRef:
              name: env-config 
              key: POSTGRESS_AWS_MEDIA_BUCKET
        - name: POSTGRESS_AWS_PROFILE
          valueFrom:
            configMapKeyRef:
              name: env-config 
              key: POSTGRESS_AWS_PROFILE
        - name: POSTGRESS_AWS_REGION
          valueFrom:
            configMapKeyRef:
              name: env-config 
              key: POSTGRESS_AWS_REGION
        - name: POSTGRESS_DATABASE
          valueFrom:
            configMapKeyRef:
              name: env-config 
              key: POSTGRESS_DATABASE
        - name: POSTGRESS_DIALECT
          valueFrom:
            configMapKeyRef:
              name: env-config 
              key: POSTGRESS_DIALECT
        - name: POSTGRESS_HOST
          valueFrom:
            configMapKeyRef:
              name: env-config
              key: POSTGRESS_HOST
        - name: POSTGRESS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: env-secret
              key: POSTGRESS_PASSWORD
        - name: POSTGRESS_USERNAME
          valueFrom:
            secretKeyRef:
              name: env-secret 
              key: POSTGRESS_USERNAME
        volumeMounts:
        - name: aws-secret
          mountPath : "root/.aws/"
          readOnly: true
      restartPolicy: Always
      volumes : 
      - name: aws-secret
        secret:
          secretName: aws-secret